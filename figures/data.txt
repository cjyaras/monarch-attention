softmax_flops = [9.66e9, 38.7e9, 155.0e9, 619.0e9]
nystrom_flops = [1.93e9, 4.41e9, 10.6e9, 35.0e9]
monarch_flops = [1.96e9, 3.93e9, 10.9e9, 31.4e9]

softmax_rouge_1 = [30.08, 33.32, 34.30, 34.76]
nystrom_rouge_1 = [29.54, 32.13, 32.42, 32.86]
monarch_rouge_1 = [29.78, 32.56, 33.52, 33.94]

softmax_rouge_2 = [5.43, 6.65, 7.29, 7.62]
nystrom_rouge_2 = [5.35, 6.30, 6.79, 7.05]
monarch_rouge_2 = [5.38, 6.41, 6.94, 7.28]

softmax_rouge_l = [15.04, 15.93, 16.31, 16.58]
nystrom_rouge_l = [14.95, 15.56, 15.60, 15.83]
monarch_rouge_l = [14.98, 15.76, 16.15, 16.42]

import matplotlib.pyplot as plt

plt.rcParams.update(
    {
        "font.family": "DejaVu Sans Mono",
        "font.size": 12,
    }
)


def hex_color_to_tuple(hex_color: str) -> tuple[float, float, float]:
    return tuple(int(hex_color[i : i + 2], 16) / 255.0 for i in (1, 3, 5))  # type: ignore


colors = {
    "monarch-attention": hex_color_to_tuple("#332288"),
    "performer": hex_color_to_tuple("#44AA99"),
    "cosformer": hex_color_to_tuple("#88CCEE"),
    "linear-attention": hex_color_to_tuple("#DDCC77"),
    "nystromformer": hex_color_to_tuple("#AA4499"),
    "softmax": hex_color_to_tuple("#882255"),
}


def main():

    softmax_flops = [9.66e9, 38.7e9, 155.0e9, 619.0e9]
    nystrom_flops = [1.93e9, 4.41e9, 10.6e9, 35.0e9]
    monarch_flops = [1.96e9, 3.93e9, 10.9e9, 31.4e9]

    softmax_rouge_1 = [30.08, 33.32, 34.30, 34.76]
    nystrom_rouge_1 = [29.54, 32.13, 32.42, 32.86]
    monarch_rouge_1 = [29.78, 32.56, 33.52, 33.94]

    softmax_rouge_2 = [5.43, 6.65, 7.29, 7.62]
    nystrom_rouge_2 = [5.35, 6.30, 6.79, 7.05]
    monarch_rouge_2 = [5.38, 6.41, 6.94, 7.28]

    softmax_rouge_l = [15.04, 15.93, 16.31, 16.58]
    nystrom_rouge_l = [14.95, 15.56, 15.60, 15.83]
    monarch_rouge_l = [14.98, 15.76, 16.15, 16.42]

    fig, ax = plt.subplots(1, 3, figsize=(15, 5))

    ax[0].set_xscale("log")
    # ax[0].semilogx(softmax_flops, softmax_rouge_1, "-o", label="softmax")
    ax[0].scatter(
        softmax_flops,
        softmax_rouge_1,
        marker="s",
        s=150,
        edgecolor="black",
        linewidth=1.5,
    )
    # ax[0].semilogx(nystrom_flops, nystrom_rouge_1, "-x", label="nystromformer")
    # ax[0].semilogx(monarch_flops, monarch_rouge_1, "-+", label="monarch-attention")
    # ax[0].set_xlabel("Total Attention FLOPs")
    # ax[0].set_ylabel("ROUGE-1")
    # ax[0].legend()

    # ax[1].semilogx(softmax_flops, softmax_rouge_2, "-o", label="Softmax")
    # ax[1].semilogx(nystrom_flops, nystrom_rouge_2, "-x", label="Nystrom")
    # ax[1].semilogx(monarch_flops, monarch_rouge_2, "-+", label="Monarch")
    # ax[1].set_xlabel("GFLOPs")
    # ax[1].set_ylabel("ROUGE-2")
    # ax[1].legend()

    # ax[1].semilogx(softmax_flops, softmax_rouge_l, "-o", label="softmax")
    # ax[1].semilogx(nystrom_flops, nystrom_rouge_l, "-x", label="nystromformer")
    # ax[1].semilogx(monarch_flops, monarch_rouge_l, "-+", label="monarch-attention")
    # ax[1].set_xlabel("Total Attention FLOPs")
    # ax[1].set_ylabel("ROUGE-L")
    # ax[1].legend()

    fig.tight_layout()
    fig.savefig("figures/bart_results.pdf", bbox_inches="tight")


if __name__ == "__main__":
    main()
